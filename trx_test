#!/bin/sh
#
#
# Do a check of stopping the master with a big transaction and see that
# the slaves and maxscale recover correctly afterwards.
myname=$(basename $0)
myhostname=$(hostname -s)

msg_info () {
	echo "$(date) $myhostname $myname[$$]: $*"
}

msg_fatal () {
	msg_info "FATAL: $*"
	exit 1
}

msg_sleep() {
	local seconds=$1
	msg_info "sleep $seconds seconds"
	sleep $seconds
}

all_checks () {
	./status_all $include_maxscale
	./check_slaves $include_maxscale
	./check_binlogs $include_maxscale

	./trx_check
}

# shouldn't be hard-coded
tarball=~/Downloads/mysql-5.6.26-linux-glibc2.5-x86_64.tar.gz
include_maxscale=-m
sbdir=$HOME/sandboxes/maxscale
stop_time=  # don't stop
while getopts t:ns: flag; do
	case $flag in
	n)	include_maxscale=;;
	s)	stop_time=$OPTARG;;
	t)	tarball=$OPTARG;;
	*)	msg_fatal "Invalid flag $flag"
	esac
done
shift $(($OPTIND - 1))
trx_size=${1:-10000}

msg_info "Will run test with transaction size of $trx_size"

# run a big transaction and check that it works.
if [ -n "$include_maxscale" ]; then
	./create_maxscale_sandbox $tarball  ||\
		msg_fatal "Unable to create maxscale sandbox"
else
	msg_info "Creating Standard MySQL Sandbox: master + 2 slaves..."
	make_replication_sandbox --replication_directory=maxscale $tarball ||\
		msg_fatal "Unable to create MySQL sandbox"
fi

./big_transaction $trx_size
msg_sleep 1

if [ -n "$stop_time" ]; then
	msg_info "stop master"
	$sbdir/master/stop ||\
		msg_fatal "Unable to stop master cleanly"
fi

all_checks

if [ -n "$stop_time" -a "$stop_time" != -1 ]; then
	if [ "$stop_time" != -1 ]; then
		msg_sleep $stop_time
		msg_info "restart master"
		$sbdir/master/start ||\
			msg_fatal "Unable to start master cleanly"
	else
		msg_info "NOT Stopping master"
	fi

	msg_sleep 5

	msg_info "Final status checks"
	all_checks
fi
